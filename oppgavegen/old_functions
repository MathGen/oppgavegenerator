from random import randint
from random import sample
from random import shuffle
import collections
from math import ceil
from oppgavegen.nsp import NumericStringParser
from sympy import *
from sympy.parsing.sympy_parser import (parse_expr, standard_transformations, implicit_multiplication)
from .models import Template
from django.template.defaultfilters import *

def arithmetics():
    number1 = randint(0,10)
    number2 = randint(0,10)
    operators = ["+", "-", "*"]
    opNumber = randint(0,2)
    if opNumber == 0:
        answer = number1 + number2
    elif opNumber == 1:
        answer = number1 - number2
    else:
        answer = number1 * number2
    string = "Hva er " + str(number1) + " " + operators[opNumber] + " " + str(number2) + "?"
    arr = [string, answer]
    return arr

def algebra(): #Legacy function
    # ax + b = c
    # ax + b = cx
    # ax + bx = c
    # a + bx = c
    # a + b = cx
    # a + bx = cx
    # a + b = c + dx

    v = randint(1, 2)                   # number of terms (left)
    h = randint(1, 2)                   # number of terms (right)
    vh = v+h                              # number of terms (total)
    a = randint(1, 8)                   # term a
    b = randint(1, 8)                   # term b
    c = randint(1, 8)                   # term c
    x = randint(2, 6)                  # given x
    number_of_x = randint(1, vh-1)      # amount of x
    operators = ["+", "-"]
    op_number1 = randint(0, 1)          # first operator
    op_number2 = randint(0, 1)          # second operator
    x_string = [" ", " ", " ", " "]
    x_placement = []
    for i in range(0, vh):
        x_placement += [1]
    if number_of_x == 1:
        i = randint(0, vh-2)
        x_placement[i] = x
        x_string[i] = "x "
    elif number_of_x == 2:
        pos = sample(range(0, vh-1), 2)
        x_placement[pos[0]] = x
        x_placement[pos[1]] = x
        x_string[pos[0]] = "x "
        x_string[pos[1]] = "x "
    else:
        pos = sample(range(0, vh-1), 3)
        x_placement[pos[0]] = x
        x_placement[pos[1]] = x
        x_placement[pos[2]] = x
        x_string[pos[0]] = "x "
        x_string[pos[1]] = "x "
        x_string[pos[2]] = "x "

    ax = a * x_placement[0]
    if vh == 4:
        bx = b * x_placement[1]
        cx = c * x_placement[2]
        if op_number1 == 0 and op_number2 == 0:
            d = (ax + bx - cx) * x_placement[3]
        elif op_number1 == 0 and op_number2 == 1:
            d = (-ax - bx + cx) * x_placement[3]
        elif op_number1 == 1 and op_number2 == 0:
            d = (ax - bx - cx) * x_placement[3]
        else:
            d = (-ax + bx + cx) * x_placement[3]
        string = str(a) + "%s" + str(operators[op_number1]) + " " + str(b) + "%s" + "= " + str(c) + "%s" + str(operators[op_number2]) + " " + str(d) + "%s"
        s = string % (x_string[0], x_string[1], x_string[2], x_string[3])

    if vh == 3:
        bx = b * x_placement[1]
        m = randint(0, 1)
        if m == 0:
            if op_number1 == 0:
                c = (ax + bx) * x_placement[2]
            else:
                c = (ax - bx) * x_placement[2]
            string = str(a) + "%s" + str(operators[op_number1]) + " " + str(b) + "%s" + "= " + str(c) + "%s"
            s = string % (x_string[0], x_string[1], x_string[2])
        else:
            if op_number1 == 0:
                c = (ax - bx) * x_placement[2]
            else:
                c = (-ax + bx) * x_placement[2]
            string = str(a) + "%s" + "= " + str(b) + "%s" + str(operators[op_number1]) + " " + str(c) + "%s"
            s = string % (x_string[0], x_string[1], x_string[2])

    if vh == 2:
        b = ax * x_placement[1]
        string = str(a) + "%s" + "= " + str(b)  + "%s"
        s = string % (x_string[0], x_string[1])

    arr = [s, x]
    return arr

def pypartest():
    string = "4^2"
    nsp = NumericStringParser()
    x=nsp.eval(string)
    s = "hva er " + string + "?"
    arr = [s,int(x)]
    return  arr

def altArithmetics():
    operators = [" + ", " - ", " * "]
    ledd = randint(2,4)
    string = str(randint(0,10)) + operators[randint(0,2)] + str(randint(0,10))
    if ledd > 2:
        for i in range(ledd - 2):
            string+= operators[randint(0,2)] + str(randint(0,10))
    nsp = NumericStringParser()

    x= nsp.eval(string)
    s = "hva er " + string + "?"
    arr = [s,int(x)]
    return arr

def sympyTest():
    t = standard_transformations + (implicit_multiplication,) #for sikkerhet, gjør om 2x til 2*x

    x = symbols('x')
    string = "2x + 4"
    string2 = "8"
    test = parse_expr(string, transformations = t)
    test2 = parse_expr(string2,  transformations = t)
    arr = solve(Eq(test, test2), x)
    out = [string + " = " + string2, arr[0]]

    return out

def to_asciimath(s): #legacy function, we probably won't need this
    new_s = s
    index = 0
    counter = 0
    # do this only between asciimath delimeters: ``
    for c in s:
        if c == '/' or c == '^':
            new_s = new_s[:index] + c + new_s[index:]
            counter += 1
        index += 1
    return new_s

###get_answer_from_solution###
#returns the last calculation of a string, not used anymore.
def get_answer_from_solution(s): #this function might not be usefull if we implement a answer for every question since we wouldn't have to find the answer then
    answer = ''
    record = False
    b = ""
    for c in s[::-1]:
        if c == '?' and b == '@':
            record = True
        elif c == '@' and b == '?':
            return calculate_answer(answer[1:])
        elif record == True:
            answer = c + answer
        b = c
    return s #Returns the original string if there are no calculations, this could be bad though since it would return the whole solution, and not just the answer

def make_variables(amount): #this is not needed anymore
    variables = []
    for x in range(0, amount):
        variables.append('R' + str(x))
    return variables

def unused_skip_text(expression):
    temp_expression = ""
    i = 0
    counter = 0
    while(i < len(expression)):
        if(expression[i] == '\\'):
            if(expression[i + 1] == 't' and expression[i + 2] == 'e' and expression[i + 3] == 'x' and expression[i + 4] == 't'):
                while(true):
                    if(expression[i] == ')' and counter == 0):
                        break
                    if(expression[i] == '('):
                        counter += 1
                    elif(expression[i+1] == ')'):
                        counter -= 1
                    temp_expression += expression[i]
                    i += 1
            else:
                while(expression[i] != '(' and expression[i] != ' '):
                    temp_expression += expression[i]
                    i += 1
        temp_expression += expression[i]
        i += 1
    expression = temp_expression

###validate_solution###
#Checks if the solution made is a valid one according to different tests
#If it isn't a new solution will be made using different values
def validate_solution(answer, decimal_allowed, zero_allowed):

    if  '/' not in str(answer) and 'cos' not in str(answer) and 'sin' not in str(answer) and 'tan' not in str(answer) and '§' not in str(answer):
        print('inside validate solution: ' + str(answer))
        decimal_answer = False #check_for_decimal(parse_answer(answer).replace('`', ''))
    elif '/' in str(answer): #checks if the answer contains /.
        decimal_answer = False #technically the answer doesn't contain decimal numbers if for instance it is given on the form 1/5
    else:
        decimal_answer = True
    contains_zero = answer == 0
    valid_solution = True
    if decimal_answer == True and decimal_allowed == False:
        valid_solution = False
    if contains_zero == True and zero_allowed == False:
        valid_solution = False
    return valid_solution

###check_for_decimal###
#Returns True/False depending on if the float has decimals.
#Examples: 5.0000 returns True and 5.12312 returns False
def check_for_decimal(f):
    return float(f).is_integer() #Returns True if f doesn't have a decimal

###lesser_than###
#Checks if a lesser_than condition string is true or false.
#If false the values in the string will be replaced and a variable notes that something has changed.
#The function returns a updated dictionary of the variables that are used and also if something has changed
def lesser_than(string, domain_dict, variable_dict):
    #will loop the full duration if string with no variable is passed. ie. 2 > 4
    counter = 0 #To stop it from looping forever
    something_changed = False #One of the returns values. Shows if something had to be changed.
    arr_changed = string_replace(string, variable_dict).split('<')
    arr_unchanged = string.split('<')
    variables_left = get_variables_used(arr_unchanged[0], variable_dict)
    variables_right = get_variables_used(arr_unchanged[1], variable_dict)
    while sympify(latex_to_sympy(arr_changed[0] + '<' + arr_changed[1])) == False:
        something_changed = True
        change = randint(0,1)
        if (len(variables_right) < 1) and (len(variables_left) < 1):
            print('no variables given') #this is a error where no variables were given ie. 2 > 4
        elif(len(variables_right) < 1):
            change = 0
        elif(len(variables_left) < 1):
            change = 1

        if change == 0 and len(variables_left) > 0: #change the left side of <
            #todo add exception for the sympify
            #todo add compatability with float numbers as well (random.uniform(1.2,1.9))
            variable_to_change = variables_left[randint(0,len(variables_left)-1)]
            new_value = new_random_value(variable_to_change,domain_dict, ceil(solve_inequality(string,variable_dict, variable_to_change)),'left') #todo ceil is only really good for templates with integers.
            variable_dict[variable_to_change] = new_value
        elif change == 1 and len(variables_right) > 0: #change the right side of <
            variable_to_change = variables_right[randint(0,len(variables_right)-1)]
            new_value = new_random_value(variable_to_change,domain_dict, ceil(solve_inequality(string,variable_dict, variable_to_change)), 'right') #Can't just move over - elements as this would fuck over / and *
            variable_dict[variable_to_change] = new_value
        arr_changed = string_replace(string, variable_dict).split('<') #change the values with the new one
        counter += 1
        if counter >= 100:
            break
    print("Sucess: " + '<'.join(arr_changed) + "  counter = " + str(counter))
    return_dict = {'variable_dict' : variable_dict, 'something_changed' : something_changed}
    return return_dict

####for use with lessar_than###
#Do it the fast way if | and = is not present in conditions
def un_needed():
    redo = True #keeps track of if the conditions have to be tried again
    if (not '|' in conditions) and (not '=' in conditions) and False: #Disabled this for now
        conditions = conditions.split('&')
        while redo:
            counter = 0
            print(conditions)
            for c in conditions:
                print(c)
                if '<' in c:
                    conditions_dict = lesser_than(c, domain_dict, variable_dict)
                elif '>' in c:
                    print(greater_to_lesser_than(c))
                    conditions_dict = lesser_than(greater_to_lesser_than(c), domain_dict, variable_dict)
                variable_dict = conditions_dict['variable_dict'] #Updates the variable dictionary
                something_changed = conditions_dict['something_changed'] #Tells if something has changed
                if something_changed:
                    counter += 1
            if counter == 0:
                redo = False #if nothing has changed, don't try the conditions again